// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// cmd 组成规则，服务器mod*100000+cmd
// 每组服务器cmd之间用 _BEGIN _END 包起来
type TDT_CMD int32

const (
	TDT_CMD_INVALID_CMD TDT_CMD = 0
	// game server
	TDT_CMD_GAME_CMD_BEGIN             TDT_CMD = 200000
	TDT_CMD_GAME_CMD_HELLO_REQ         TDT_CMD = 200001
	TDT_CMD_GAME_CMD_HELLO_RSP         TDT_CMD = 200002
	TDT_CMD_GAME_CMD_LOGIN_REQ         TDT_CMD = 200003
	TDT_CMD_GAME_CMD_LOGIN_RSP         TDT_CMD = 200004
	TDT_CMD_GAME_CMD_RANK_REQ          TDT_CMD = 200005
	TDT_CMD_GAME_CMD_RANK_RSP          TDT_CMD = 200006
	TDT_CMD_GAME_CMD_FRIEND_LIST_REQ   TDT_CMD = 200007
	TDT_CMD_GAME_CMD_FRIEND_LIST_RSP   TDT_CMD = 200008
	TDT_CMD_GAME_CMD_SETTLE_ROUND_REQ  TDT_CMD = 200009
	TDT_CMD_GAME_CMD_SETTLE_ROUND_RSP  TDT_CMD = 200010
	TDT_CMD_GAME_CMD_BUILD_REQ         TDT_CMD = 200011
	TDT_CMD_GAME_CMD_BUILD_RSP         TDT_CMD = 200012
	TDT_CMD_GAME_CMD_SET_BD_STATUS_REQ TDT_CMD = 200013
	TDT_CMD_GAME_CMD_SET_BD_STATUS_RSP TDT_CMD = 200014
	TDT_CMD_GAME_CMD_FRI_ISLAND_REQ    TDT_CMD = 200015
	TDT_CMD_GAME_CMD_FRI_ISLAND_RSP    TDT_CMD = 200016
	TDT_CMD_GAME_CMD_ISLAND_MAP_REQ    TDT_CMD = 200017
	TDT_CMD_GAME_CMD_ISLAND_MAP_RSP    TDT_CMD = 200018
	TDT_CMD_GAME_MSG_REQ               TDT_CMD = 200019
	TDT_CMD_GAME_MSG_RSP               TDT_CMD = 200020
	TDT_CMD_GAME_BUY_REQ               TDT_CMD = 200021
	TDT_CMD_GAME_BUY_RSP               TDT_CMD = 200022
	TDT_CMD_GAME_CMD_END               TDT_CMD = 299999
	// login server
	TDT_CMD_AUTH_CMD_BEGIN         TDT_CMD = 300000
	TDT_CMD_AUTH_CMD_ACC_LOGIN_REQ TDT_CMD = 300001
	TDT_CMD_AUTH_CMD_ACC_LOGIN_RSP TDT_CMD = 300002
	TDT_CMD_AUTH_CMD_END           TDT_CMD = 399999
	// core server
	TDT_CMD_CORE_CMD_BEGIN             TDT_CMD = 400000
	TDT_CMD_CORE_CMD_GET_USER_CORE_REQ TDT_CMD = 400001
	TDT_CMD_CORE_CMD_GET_USER_CORE_RSP TDT_CMD = 400002
	TDT_CMD_CORE_CMD_BUILD_REQ         TDT_CMD = 400003
	TDT_CMD_CORE_CMD_BUILD_RSP         TDT_CMD = 400004
	TDT_CMD_CORE_CMD_END               TDT_CMD = 499999
)

var TDT_CMD_name = map[int32]string{
	0:      "INVALID_CMD",
	200000: "GAME_CMD_BEGIN",
	200001: "GAME_CMD_HELLO_REQ",
	200002: "GAME_CMD_HELLO_RSP",
	200003: "GAME_CMD_LOGIN_REQ",
	200004: "GAME_CMD_LOGIN_RSP",
	200005: "GAME_CMD_RANK_REQ",
	200006: "GAME_CMD_RANK_RSP",
	200007: "GAME_CMD_FRIEND_LIST_REQ",
	200008: "GAME_CMD_FRIEND_LIST_RSP",
	200009: "GAME_CMD_SETTLE_ROUND_REQ",
	200010: "GAME_CMD_SETTLE_ROUND_RSP",
	200011: "GAME_CMD_BUILD_REQ",
	200012: "GAME_CMD_BUILD_RSP",
	200013: "GAME_CMD_SET_BD_STATUS_REQ",
	200014: "GAME_CMD_SET_BD_STATUS_RSP",
	200015: "GAME_CMD_FRI_ISLAND_REQ",
	200016: "GAME_CMD_FRI_ISLAND_RSP",
	200017: "GAME_CMD_ISLAND_MAP_REQ",
	200018: "GAME_CMD_ISLAND_MAP_RSP",
	200019: "GAME_MSG_REQ",
	200020: "GAME_MSG_RSP",
	200021: "GAME_BUY_REQ",
	200022: "GAME_BUY_RSP",
	299999: "GAME_CMD_END",
	300000: "AUTH_CMD_BEGIN",
	300001: "AUTH_CMD_ACC_LOGIN_REQ",
	300002: "AUTH_CMD_ACC_LOGIN_RSP",
	399999: "AUTH_CMD_END",
	400000: "CORE_CMD_BEGIN",
	400001: "CORE_CMD_GET_USER_CORE_REQ",
	400002: "CORE_CMD_GET_USER_CORE_RSP",
	400003: "CORE_CMD_BUILD_REQ",
	400004: "CORE_CMD_BUILD_RSP",
	499999: "CORE_CMD_END",
}
var TDT_CMD_value = map[string]int32{
	"INVALID_CMD":                0,
	"GAME_CMD_BEGIN":             200000,
	"GAME_CMD_HELLO_REQ":         200001,
	"GAME_CMD_HELLO_RSP":         200002,
	"GAME_CMD_LOGIN_REQ":         200003,
	"GAME_CMD_LOGIN_RSP":         200004,
	"GAME_CMD_RANK_REQ":          200005,
	"GAME_CMD_RANK_RSP":          200006,
	"GAME_CMD_FRIEND_LIST_REQ":   200007,
	"GAME_CMD_FRIEND_LIST_RSP":   200008,
	"GAME_CMD_SETTLE_ROUND_REQ":  200009,
	"GAME_CMD_SETTLE_ROUND_RSP":  200010,
	"GAME_CMD_BUILD_REQ":         200011,
	"GAME_CMD_BUILD_RSP":         200012,
	"GAME_CMD_SET_BD_STATUS_REQ": 200013,
	"GAME_CMD_SET_BD_STATUS_RSP": 200014,
	"GAME_CMD_FRI_ISLAND_REQ":    200015,
	"GAME_CMD_FRI_ISLAND_RSP":    200016,
	"GAME_CMD_ISLAND_MAP_REQ":    200017,
	"GAME_CMD_ISLAND_MAP_RSP":    200018,
	"GAME_MSG_REQ":               200019,
	"GAME_MSG_RSP":               200020,
	"GAME_BUY_REQ":               200021,
	"GAME_BUY_RSP":               200022,
	"GAME_CMD_END":               299999,
	"AUTH_CMD_BEGIN":             300000,
	"AUTH_CMD_ACC_LOGIN_REQ":     300001,
	"AUTH_CMD_ACC_LOGIN_RSP":     300002,
	"AUTH_CMD_END":               399999,
	"CORE_CMD_BEGIN":             400000,
	"CORE_CMD_GET_USER_CORE_REQ": 400001,
	"CORE_CMD_GET_USER_CORE_RSP": 400002,
	"CORE_CMD_BUILD_REQ":         400003,
	"CORE_CMD_BUILD_RSP":         400004,
	"CORE_CMD_END":               499999,
}

func (x TDT_CMD) String() string {
	return proto.EnumName(TDT_CMD_name, int32(x))
}
func (TDT_CMD) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterEnum("aladinfun.TripleDream.proto.TDT_CMD", TDT_CMD_name, TDT_CMD_value)
}

func init() { proto.RegisterFile("cmd.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc9, 0x8e, 0xd4, 0x30,
	0x10, 0x86, 0x39, 0x31, 0xc2, 0x44, 0x50, 0x94, 0x10, 0x13, 0xb6, 0x81, 0x33, 0x87, 0xb9, 0xf0,
	0x04, 0xee, 0xb6, 0xc9, 0x58, 0xb8, 0x13, 0x93, 0x72, 0x90, 0x38, 0x59, 0x0d, 0x33, 0x48, 0x23,
	0xcd, 0xa6, 0x16, 0xdc, 0xd9, 0x9e, 0x22, 0x17, 0x8e, 0x7d, 0xe1, 0x48, 0xdf, 0x61, 0xd8, 0xf7,
	0x9d, 0x2b, 0xcb, 0x8b, 0x80, 0xec, 0x69, 0x99, 0x28, 0x0a, 0x39, 0xfa, 0xff, 0xea, 0xaf, 0x2a,
	0x27, 0xbf, 0xd9, 0x81, 0x6b, 0x9b, 0xab, 0xcb, 0x3b, 0x93, 0xed, 0x1b, 0xdb, 0x78, 0x72, 0xbc,
	0x31, 0x5e, 0x5d, 0xdf, 0xba, 0x7e, 0x73, 0x6b, 0xd9, 0x4e, 0xd6, 0x77, 0x36, 0xd6, 0xc4, 0x64,
	0x6d, 0xbc, 0xb9, 0x07, 0xcf, 0x3d, 0x58, 0x60, 0x0b, 0x56, 0x58, 0x37, 0x1c, 0x09, 0x3c, 0xcc,
	0x0e, 0xaa, 0xfc, 0x32, 0xd7, 0x4a, 0xf8, 0x23, 0xec, 0xc3, 0xa3, 0xec, 0x50, 0xc6, 0x47, 0xd2,
	0x9f, 0xdc, 0x40, 0x66, 0x2a, 0x87, 0x47, 0x75, 0x82, 0x29, 0xc3, 0xa8, 0xae, 0x48, 0xad, 0x0b,
	0x57, 0xca, 0x4b, 0xf0, 0xb8, 0x9b, 0x90, 0x81, 0xdd, 0x16, 0xd1, 0x45, 0xa6, 0xf2, 0xe0, 0x79,
	0xd2, 0x4d, 0xc8, 0xc0, 0xd3, 0x3a, 0xc1, 0x45, 0x76, 0x24, 0x92, 0x92, 0xe7, 0x17, 0x83, 0xe5,
	0x59, 0x27, 0x20, 0x03, 0xcf, 0xeb, 0x04, 0x97, 0x58, 0x1a, 0xc1, 0x85, 0x52, 0xc9, 0x5c, 0x38,
	0xad, 0xc8, 0x06, 0xe3, 0x8b, 0x3e, 0x4e, 0x06, 0x5e, 0xd6, 0x09, 0x9e, 0x61, 0xc7, 0x23, 0x27,
	0x69, 0xad, 0x96, 0xae, 0x2c, 0xaa, 0x5c, 0x84, 0x06, 0xaf, 0x7a, 0x0b, 0xc8, 0xc0, 0xeb, 0xd6,
	0x6d, 0x06, 0x95, 0xd2, 0x7b, 0xd6, 0x37, 0xdd, 0x84, 0x0c, 0xbc, 0xad, 0x13, 0x3c, 0xcb, 0x4e,
	0x34, 0x9b, 0xba, 0x81, 0x70, 0x64, 0xb9, 0xad, 0x28, 0x78, 0xdf, 0xf5, 0x57, 0x90, 0x81, 0xf7,
	0x75, 0x82, 0xa7, 0xd9, 0x62, 0xf3, 0x66, 0x4e, 0x91, 0xe6, 0xf3, 0xbd, 0x3f, 0xf4, 0x60, 0x32,
	0xf0, 0xb1, 0x85, 0xe7, 0x68, 0xc4, 0x4d, 0x70, 0x7f, 0xea, 0xc1, 0x64, 0xe0, 0x73, 0x9d, 0x20,
	0xb2, 0x24, 0xe0, 0x11, 0x65, 0xc1, 0xf2, 0xa5, 0xad, 0x91, 0x81, 0xaf, 0x0d, 0x6d, 0x50, 0x5d,
	0x09, 0x75, 0xdf, 0xda, 0x1a, 0x19, 0xf8, 0xde, 0xd0, 0xfc, 0x38, 0x99, 0x0b, 0xf8, 0x31, 0x45,
	0x9f, 0x44, 0x5e, 0xd9, 0x95, 0x46, 0x12, 0x7f, 0x4e, 0x11, 0x4f, 0xb1, 0x63, 0x51, 0xe5, 0xc3,
	0x61, 0x23, 0x59, 0xbf, 0xfe, 0x4f, 0xc9, 0xc0, 0xef, 0x29, 0xfa, 0x29, 0x91, 0xfa, 0x29, 0x7f,
	0x1e, 0xa6, 0x7e, 0xca, 0xb0, 0x28, 0x9b, 0x79, 0xbf, 0x35, 0x4b, 0xfd, 0xd7, 0x8f, 0x6a, 0x26,
	0xad, 0xab, 0x48, 0x96, 0x2e, 0x28, 0x7e, 0xd2, 0xed, 0xfe, 0x0a, 0x32, 0x70, 0x67, 0x96, 0xfa,
	0xbf, 0xff, 0xaf, 0x73, 0xcc, 0xc5, 0xdd, 0x6e, 0x42, 0x06, 0xee, 0xcd, 0x52, 0xbf, 0x61, 0x24,
	0x7e, 0xc3, 0xfb, 0xbb, 0x4b, 0x57, 0xf7, 0x87, 0x57, 0x7b, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x36, 0x18, 0x4b, 0x63, 0xdf, 0x03, 0x00, 0x00,
}
