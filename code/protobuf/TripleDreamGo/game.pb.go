// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AppUpdateInfo struct {
	Version         string `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	VersionManiFest string `protobuf:"bytes,2,opt,name=VersionManiFest" json:"VersionManiFest,omitempty"`
	ProjectManiFest string `protobuf:"bytes,3,opt,name=ProjectManiFest" json:"ProjectManiFest,omitempty"`
	UpdContent      string `protobuf:"bytes,4,opt,name=UpdContent" json:"UpdContent,omitempty"`
}

func (m *AppUpdateInfo) Reset()                    { *m = AppUpdateInfo{} }
func (m *AppUpdateInfo) String() string            { return proto.CompactTextString(m) }
func (*AppUpdateInfo) ProtoMessage()               {}
func (*AppUpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AppUpdateInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AppUpdateInfo) GetVersionManiFest() string {
	if m != nil {
		return m.VersionManiFest
	}
	return ""
}

func (m *AppUpdateInfo) GetProjectManiFest() string {
	if m != nil {
		return m.ProjectManiFest
	}
	return ""
}

func (m *AppUpdateInfo) GetUpdContent() string {
	if m != nil {
		return m.UpdContent
	}
	return ""
}

type LoginInfo struct {
	CgiRoot    string `protobuf:"bytes,1,opt,name=CgiRoot" json:"CgiRoot,omitempty"`
	IsSrvDown  uint32 `protobuf:"varint,2,opt,name=IsSrvDown" json:"IsSrvDown,omitempty"`
	SrvDownMsg string `protobuf:"bytes,3,opt,name=SrvDownMsg" json:"SrvDownMsg,omitempty"`
}

func (m *LoginInfo) Reset()                    { *m = LoginInfo{} }
func (m *LoginInfo) String() string            { return proto.CompactTextString(m) }
func (*LoginInfo) ProtoMessage()               {}
func (*LoginInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *LoginInfo) GetCgiRoot() string {
	if m != nil {
		return m.CgiRoot
	}
	return ""
}

func (m *LoginInfo) GetIsSrvDown() uint32 {
	if m != nil {
		return m.IsSrvDown
	}
	return 0
}

func (m *LoginInfo) GetSrvDownMsg() string {
	if m != nil {
		return m.SrvDownMsg
	}
	return ""
}

type HelloReq struct {
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type HelloRsp struct {
	Head      *RspHead       `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	AppUpd    *AppUpdateInfo `protobuf:"bytes,2,opt,name=AppUpd" json:"AppUpd,omitempty"`
	LoginInfo *LoginInfo     `protobuf:"bytes,3,opt,name=LoginInfo" json:"LoginInfo,omitempty"`
}

func (m *HelloRsp) Reset()                    { *m = HelloRsp{} }
func (m *HelloRsp) String() string            { return proto.CompactTextString(m) }
func (*HelloRsp) ProtoMessage()               {}
func (*HelloRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *HelloRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *HelloRsp) GetAppUpd() *AppUpdateInfo {
	if m != nil {
		return m.AppUpd
	}
	return nil
}

func (m *HelloRsp) GetLoginInfo() *LoginInfo {
	if m != nil {
		return m.LoginInfo
	}
	return nil
}

type UserData struct {
	UID    string      `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Core   *UserCore   `protobuf:"bytes,2,opt,name=Core" json:"Core,omitempty"`
	Social *UserSocial `protobuf:"bytes,3,opt,name=Social" json:"Social,omitempty"`
	Statis *UserStatis `protobuf:"bytes,4,opt,name=Statis" json:"Statis,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *UserData) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *UserData) GetCore() *UserCore {
	if m != nil {
		return m.Core
	}
	return nil
}

func (m *UserData) GetSocial() *UserSocial {
	if m != nil {
		return m.Social
	}
	return nil
}

func (m *UserData) GetStatis() *UserStatis {
	if m != nil {
		return m.Statis
	}
	return nil
}

type LoginReq struct {
	Type        LOGIN_TYPE  `protobuf:"varint,1,opt,name=Type,enum=aladinfun.TripleDream.proto.LOGIN_TYPE" json:"Type,omitempty"`
	AccessToken string      `protobuf:"bytes,2,opt,name=AccessToken" json:"AccessToken,omitempty"`
	Gender      GENDER_TYPE `protobuf:"varint,3,opt,name=Gender,enum=aladinfun.TripleDream.proto.GENDER_TYPE" json:"Gender,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *LoginReq) GetType() LOGIN_TYPE {
	if m != nil {
		return m.Type
	}
	return LOGIN_TYPE_LOGIN_TYPE_INIT
}

func (m *LoginReq) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *LoginReq) GetGender() GENDER_TYPE {
	if m != nil {
		return m.Gender
	}
	return GENDER_TYPE_GENDER_TYPE_INIT
}

type LoginRsp struct {
	Head      *RspHead       `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	UserData  *UserData      `protobuf:"bytes,2,opt,name=UserData" json:"UserData,omitempty"`
	EncodeKey string         `protobuf:"bytes,3,opt,name=EncodeKey" json:"EncodeKey,omitempty"`
	KeyExpire uint32         `protobuf:"varint,4,opt,name=KeyExpire" json:"KeyExpire,omitempty"`
	CgiRoot   string         `protobuf:"bytes,5,opt,name=CgiRoot" json:"CgiRoot,omitempty"`
	Cookie    string         `protobuf:"bytes,6,opt,name=Cookie" json:"Cookie,omitempty"`
	Round     *UserGameRound `protobuf:"bytes,7,opt,name=Round" json:"Round,omitempty"`
}

func (m *LoginRsp) Reset()                    { *m = LoginRsp{} }
func (m *LoginRsp) String() string            { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()               {}
func (*LoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LoginRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *LoginRsp) GetUserData() *UserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *LoginRsp) GetEncodeKey() string {
	if m != nil {
		return m.EncodeKey
	}
	return ""
}

func (m *LoginRsp) GetKeyExpire() uint32 {
	if m != nil {
		return m.KeyExpire
	}
	return 0
}

func (m *LoginRsp) GetCgiRoot() string {
	if m != nil {
		return m.CgiRoot
	}
	return ""
}

func (m *LoginRsp) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *LoginRsp) GetRound() *UserGameRound {
	if m != nil {
		return m.Round
	}
	return nil
}

type RankReq struct {
	Type uint32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
}

func (m *RankReq) Reset()                    { *m = RankReq{} }
func (m *RankReq) String() string            { return proto.CompactTextString(m) }
func (*RankReq) ProtoMessage()               {}
func (*RankReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *RankReq) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type RankRsp struct {
	Head *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	List []*UserSumm `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (m *RankRsp) Reset()                    { *m = RankRsp{} }
func (m *RankRsp) String() string            { return proto.CompactTextString(m) }
func (*RankRsp) ProtoMessage()               {}
func (*RankRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *RankRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RankRsp) GetList() []*UserSumm {
	if m != nil {
		return m.List
	}
	return nil
}

type FriendListReq struct {
	Type uint32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
}

func (m *FriendListReq) Reset()                    { *m = FriendListReq{} }
func (m *FriendListReq) String() string            { return proto.CompactTextString(m) }
func (*FriendListReq) ProtoMessage()               {}
func (*FriendListReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *FriendListReq) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type FriendListRsp struct {
	Head *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	List []*UserSumm `protobuf:"bytes,2,rep,name=List" json:"List,omitempty"`
}

func (m *FriendListRsp) Reset()                    { *m = FriendListRsp{} }
func (m *FriendListRsp) String() string            { return proto.CompactTextString(m) }
func (*FriendListRsp) ProtoMessage()               {}
func (*FriendListRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *FriendListRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *FriendListRsp) GetList() []*UserSumm {
	if m != nil {
		return m.List
	}
	return nil
}

type OprHistory struct {
	ItemID       string `protobuf:"bytes,1,opt,name=ItemID" json:"ItemID,omitempty"`
	FromColIndex uint32 `protobuf:"varint,2,opt,name=FromColIndex" json:"FromColIndex,omitempty"`
	FromRowIndex uint32 `protobuf:"varint,3,opt,name=FromRowIndex" json:"FromRowIndex,omitempty"`
	ToColIndex   uint32 `protobuf:"varint,4,opt,name=ToColIndex" json:"ToColIndex,omitempty"`
	ToRowIndex   uint32 `protobuf:"varint,5,opt,name=ToRowIndex" json:"ToRowIndex,omitempty"`
}

func (m *OprHistory) Reset()                    { *m = OprHistory{} }
func (m *OprHistory) String() string            { return proto.CompactTextString(m) }
func (*OprHistory) ProtoMessage()               {}
func (*OprHistory) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *OprHistory) GetItemID() string {
	if m != nil {
		return m.ItemID
	}
	return ""
}

func (m *OprHistory) GetFromColIndex() uint32 {
	if m != nil {
		return m.FromColIndex
	}
	return 0
}

func (m *OprHistory) GetFromRowIndex() uint32 {
	if m != nil {
		return m.FromRowIndex
	}
	return 0
}

func (m *OprHistory) GetToColIndex() uint32 {
	if m != nil {
		return m.ToColIndex
	}
	return 0
}

func (m *OprHistory) GetToRowIndex() uint32 {
	if m != nil {
		return m.ToRowIndex
	}
	return 0
}

type SettleRoundReq struct {
	// client report data
	RoundUUID   string        `protobuf:"bytes,1,opt,name=RoundUUID" json:"RoundUUID,omitempty"`
	OprHistorys []*OprHistory `protobuf:"bytes,2,rep,name=OprHistorys" json:"OprHistorys,omitempty"`
}

func (m *SettleRoundReq) Reset()                    { *m = SettleRoundReq{} }
func (m *SettleRoundReq) String() string            { return proto.CompactTextString(m) }
func (*SettleRoundReq) ProtoMessage()               {}
func (*SettleRoundReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *SettleRoundReq) GetRoundUUID() string {
	if m != nil {
		return m.RoundUUID
	}
	return ""
}

func (m *SettleRoundReq) GetOprHistorys() []*OprHistory {
	if m != nil {
		return m.OprHistorys
	}
	return nil
}

type SettleRoundRsp struct {
	Head         *RspHead `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	NextInitSeed uint32   `protobuf:"varint,2,opt,name=NextInitSeed" json:"NextInitSeed,omitempty"`
	NextOprSeed  uint32   `protobuf:"varint,3,opt,name=NextOprSeed" json:"NextOprSeed,omitempty"`
	NextUUID     string   `protobuf:"bytes,4,opt,name=NextUUID" json:"NextUUID,omitempty"`
	Prize        *Prize   `protobuf:"bytes,5,opt,name=Prize" json:"Prize,omitempty"`
}

func (m *SettleRoundRsp) Reset()                    { *m = SettleRoundRsp{} }
func (m *SettleRoundRsp) String() string            { return proto.CompactTextString(m) }
func (*SettleRoundRsp) ProtoMessage()               {}
func (*SettleRoundRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *SettleRoundRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *SettleRoundRsp) GetNextInitSeed() uint32 {
	if m != nil {
		return m.NextInitSeed
	}
	return 0
}

func (m *SettleRoundRsp) GetNextOprSeed() uint32 {
	if m != nil {
		return m.NextOprSeed
	}
	return 0
}

func (m *SettleRoundRsp) GetNextUUID() string {
	if m != nil {
		return m.NextUUID
	}
	return ""
}

func (m *SettleRoundRsp) GetPrize() *Prize {
	if m != nil {
		return m.Prize
	}
	return nil
}

type BuildReq struct {
	Index   uint32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	ToLevel uint32 `protobuf:"varint,2,opt,name=ToLevel" json:"ToLevel,omitempty"`
}

func (m *BuildReq) Reset()                    { *m = BuildReq{} }
func (m *BuildReq) String() string            { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()               {}
func (*BuildReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *BuildReq) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BuildReq) GetToLevel() uint32 {
	if m != nil {
		return m.ToLevel
	}
	return 0
}

type BuildRsp struct {
	Head   *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Island *UserIsland `protobuf:"bytes,2,opt,name=Island" json:"Island,omitempty"`
}

func (m *BuildRsp) Reset()                    { *m = BuildRsp{} }
func (m *BuildRsp) String() string            { return proto.CompactTextString(m) }
func (*BuildRsp) ProtoMessage()               {}
func (*BuildRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *BuildRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BuildRsp) GetIsland() *UserIsland {
	if m != nil {
		return m.Island
	}
	return nil
}

// set building status
type SetBDStatusReq struct {
	Index  uint32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	PropID uint32 `protobuf:"varint,2,opt,name=PropID" json:"PropID,omitempty"`
}

func (m *SetBDStatusReq) Reset()                    { *m = SetBDStatusReq{} }
func (m *SetBDStatusReq) String() string            { return proto.CompactTextString(m) }
func (*SetBDStatusReq) ProtoMessage()               {}
func (*SetBDStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *SetBDStatusReq) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SetBDStatusReq) GetPropID() uint32 {
	if m != nil {
		return m.PropID
	}
	return 0
}

type SetBDStatusRsp struct {
	Head   *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Island *UserIsland `protobuf:"bytes,2,opt,name=Island" json:"Island,omitempty"`
}

func (m *SetBDStatusRsp) Reset()                    { *m = SetBDStatusRsp{} }
func (m *SetBDStatusRsp) String() string            { return proto.CompactTextString(m) }
func (*SetBDStatusRsp) ProtoMessage()               {}
func (*SetBDStatusRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *SetBDStatusRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *SetBDStatusRsp) GetIsland() *UserIsland {
	if m != nil {
		return m.Island
	}
	return nil
}

// look over friend's island
type FriIslandReq struct {
	IUID uint64 `protobuf:"varint,1,opt,name=IUID" json:"IUID,omitempty"`
}

func (m *FriIslandReq) Reset()                    { *m = FriIslandReq{} }
func (m *FriIslandReq) String() string            { return proto.CompactTextString(m) }
func (*FriIslandReq) ProtoMessage()               {}
func (*FriIslandReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *FriIslandReq) GetIUID() uint64 {
	if m != nil {
		return m.IUID
	}
	return 0
}

type FriIslandRsp struct {
	Head     *RspHead `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	IslandNo uint32   `protobuf:"varint,2,opt,name=IslandNo" json:"IslandNo,omitempty"`
	BDList   []uint32 `protobuf:"varint,3,rep,packed,name=BDList" json:"BDList,omitempty"`
}

func (m *FriIslandRsp) Reset()                    { *m = FriIslandRsp{} }
func (m *FriIslandRsp) String() string            { return proto.CompactTextString(m) }
func (*FriIslandRsp) ProtoMessage()               {}
func (*FriIslandRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *FriIslandRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *FriIslandRsp) GetIslandNo() uint32 {
	if m != nil {
		return m.IslandNo
	}
	return 0
}

func (m *FriIslandRsp) GetBDList() []uint32 {
	if m != nil {
		return m.BDList
	}
	return nil
}

// remove Email field from UserSumm
type IslandFriSumm struct {
	FriSummList []*UserSumm `protobuf:"bytes,1,rep,name=FriSummList" json:"FriSummList,omitempty"`
}

func (m *IslandFriSumm) Reset()                    { *m = IslandFriSumm{} }
func (m *IslandFriSumm) String() string            { return proto.CompactTextString(m) }
func (*IslandFriSumm) ProtoMessage()               {}
func (*IslandFriSumm) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *IslandFriSumm) GetFriSummList() []*UserSumm {
	if m != nil {
		return m.FriSummList
	}
	return nil
}

// get self island history list
type IslandMapReq struct {
}

func (m *IslandMapReq) Reset()                    { *m = IslandMapReq{} }
func (m *IslandMapReq) String() string            { return proto.CompactTextString(m) }
func (*IslandMapReq) ProtoMessage()               {}
func (*IslandMapReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

type IslandMapRsp struct {
	Head          *RspHead         `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Island        *UserIsland      `protobuf:"bytes,2,opt,name=Island" json:"Island,omitempty"`
	IslandFriList []*IslandFriSumm `protobuf:"bytes,3,rep,name=IslandFriList" json:"IslandFriList,omitempty"`
}

func (m *IslandMapRsp) Reset()                    { *m = IslandMapRsp{} }
func (m *IslandMapRsp) String() string            { return proto.CompactTextString(m) }
func (*IslandMapRsp) ProtoMessage()               {}
func (*IslandMapRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *IslandMapRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *IslandMapRsp) GetIsland() *UserIsland {
	if m != nil {
		return m.Island
	}
	return nil
}

func (m *IslandMapRsp) GetIslandFriList() []*IslandFriSumm {
	if m != nil {
		return m.IslandFriList
	}
	return nil
}

type MsgReq struct {
	Type uint32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
}

func (m *MsgReq) Reset()                    { *m = MsgReq{} }
func (m *MsgReq) String() string            { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()               {}
func (*MsgReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *MsgReq) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type MsgRsp struct {
	Head    *RspHead `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Msg     string   `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
	Prizes  []*Prize `protobuf:"bytes,3,rep,name=Prizes" json:"Prizes,omitempty"`
	MsgTime uint32   `protobuf:"varint,4,opt,name=MsgTime" json:"MsgTime,omitempty"`
}

func (m *MsgRsp) Reset()                    { *m = MsgRsp{} }
func (m *MsgRsp) String() string            { return proto.CompactTextString(m) }
func (*MsgRsp) ProtoMessage()               {}
func (*MsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *MsgRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *MsgRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgRsp) GetPrizes() []*Prize {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func (m *MsgRsp) GetMsgTime() uint32 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

type BuyReq struct {
	MerID uint32 `protobuf:"varint,1,opt,name=MerID" json:"MerID,omitempty"`
}

func (m *BuyReq) Reset()                    { *m = BuyReq{} }
func (m *BuyReq) String() string            { return proto.CompactTextString(m) }
func (*BuyReq) ProtoMessage()               {}
func (*BuyReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

func (m *BuyReq) GetMerID() uint32 {
	if m != nil {
		return m.MerID
	}
	return 0
}

type BuyRsp struct {
	Head   *RspHead `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Prizes []*Prize `protobuf:"bytes,2,rep,name=Prizes" json:"Prizes,omitempty"`
}

func (m *BuyRsp) Reset()                    { *m = BuyRsp{} }
func (m *BuyRsp) String() string            { return proto.CompactTextString(m) }
func (*BuyRsp) ProtoMessage()               {}
func (*BuyRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{26} }

func (m *BuyRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BuyRsp) GetPrizes() []*Prize {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func init() {
	proto.RegisterType((*AppUpdateInfo)(nil), "aladinfun.TripleDream.proto.AppUpdateInfo")
	proto.RegisterType((*LoginInfo)(nil), "aladinfun.TripleDream.proto.LoginInfo")
	proto.RegisterType((*HelloReq)(nil), "aladinfun.TripleDream.proto.HelloReq")
	proto.RegisterType((*HelloRsp)(nil), "aladinfun.TripleDream.proto.HelloRsp")
	proto.RegisterType((*UserData)(nil), "aladinfun.TripleDream.proto.UserData")
	proto.RegisterType((*LoginReq)(nil), "aladinfun.TripleDream.proto.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "aladinfun.TripleDream.proto.LoginRsp")
	proto.RegisterType((*RankReq)(nil), "aladinfun.TripleDream.proto.RankReq")
	proto.RegisterType((*RankRsp)(nil), "aladinfun.TripleDream.proto.RankRsp")
	proto.RegisterType((*FriendListReq)(nil), "aladinfun.TripleDream.proto.FriendListReq")
	proto.RegisterType((*FriendListRsp)(nil), "aladinfun.TripleDream.proto.FriendListRsp")
	proto.RegisterType((*OprHistory)(nil), "aladinfun.TripleDream.proto.OprHistory")
	proto.RegisterType((*SettleRoundReq)(nil), "aladinfun.TripleDream.proto.SettleRoundReq")
	proto.RegisterType((*SettleRoundRsp)(nil), "aladinfun.TripleDream.proto.SettleRoundRsp")
	proto.RegisterType((*BuildReq)(nil), "aladinfun.TripleDream.proto.BuildReq")
	proto.RegisterType((*BuildRsp)(nil), "aladinfun.TripleDream.proto.BuildRsp")
	proto.RegisterType((*SetBDStatusReq)(nil), "aladinfun.TripleDream.proto.SetBDStatusReq")
	proto.RegisterType((*SetBDStatusRsp)(nil), "aladinfun.TripleDream.proto.SetBDStatusRsp")
	proto.RegisterType((*FriIslandReq)(nil), "aladinfun.TripleDream.proto.FriIslandReq")
	proto.RegisterType((*FriIslandRsp)(nil), "aladinfun.TripleDream.proto.FriIslandRsp")
	proto.RegisterType((*IslandFriSumm)(nil), "aladinfun.TripleDream.proto.IslandFriSumm")
	proto.RegisterType((*IslandMapReq)(nil), "aladinfun.TripleDream.proto.IslandMapReq")
	proto.RegisterType((*IslandMapRsp)(nil), "aladinfun.TripleDream.proto.IslandMapRsp")
	proto.RegisterType((*MsgReq)(nil), "aladinfun.TripleDream.proto.MsgReq")
	proto.RegisterType((*MsgRsp)(nil), "aladinfun.TripleDream.proto.MsgRsp")
	proto.RegisterType((*BuyReq)(nil), "aladinfun.TripleDream.proto.BuyReq")
	proto.RegisterType((*BuyRsp)(nil), "aladinfun.TripleDream.proto.BuyRsp")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1026 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0x2d, 0x99, 0x96, 0x47, 0x96, 0x1b, 0x2c, 0x8a, 0x40, 0x70, 0xdd, 0xc0, 0xd8, 0xfe,
	0x19, 0x3d, 0xf8, 0xe0, 0x5e, 0x92, 0x14, 0x68, 0x62, 0x5b, 0xfe, 0x21, 0x62, 0xd9, 0xc6, 0x4a,
	0x2a, 0xda, 0x53, 0x41, 0x8b, 0x13, 0x61, 0x6b, 0x8a, 0x4b, 0xef, 0x52, 0x89, 0x15, 0x14, 0x39,
	0xb5, 0xa7, 0x3e, 0x43, 0x5f, 0xa0, 0xed, 0xbd, 0x6f, 0xd1, 0x7b, 0xd1, 0x7b, 0x9f, 0xa3, 0xd8,
	0x1f, 0x8a, 0x54, 0x00, 0xcb, 0x0a, 0x74, 0xf0, 0x6d, 0x67, 0xf6, 0xfb, 0x86, 0xdf, 0xcc, 0xec,
	0xce, 0x12, 0x60, 0x10, 0x0e, 0x71, 0x27, 0x95, 0x22, 0x13, 0xe4, 0xa3, 0x30, 0x0e, 0x23, 0x9e,
	0xbc, 0x1c, 0x25, 0x3b, 0x5d, 0xc9, 0xd3, 0x18, 0x5b, 0x12, 0xc3, 0xa1, 0xdd, 0xdc, 0x80, 0xcb,
	0x50, 0x39, 0xe0, 0xc6, 0x9a, 0xca, 0xe4, 0xa8, 0x9f, 0x39, 0xab, 0x16, 0x5d, 0xe6, 0x98, 0x91,
	0x42, 0x99, 0xaf, 0x31, 0x19, 0x39, 0x2e, 0xfd, 0xcd, 0x83, 0xc6, 0x5e, 0x9a, 0xf6, 0xd2, 0x28,
	0xcc, 0x30, 0x48, 0x5e, 0x0a, 0xd2, 0x84, 0x95, 0x6f, 0x51, 0x2a, 0x2e, 0x92, 0xa6, 0xb7, 0xe5,
	0x6d, 0xaf, 0xb2, 0xdc, 0x24, 0xdb, 0xf0, 0x81, 0x5b, 0xb6, 0xc3, 0x84, 0x1f, 0xa1, 0xca, 0x9a,
	0x4b, 0x06, 0xf1, 0xae, 0x5b, 0x23, 0x2f, 0xa4, 0xf8, 0x11, 0xfb, 0xd9, 0x04, 0x59, 0xb1, 0xc8,
	0x77, 0xdc, 0xe4, 0x11, 0x40, 0x2f, 0x8d, 0x0e, 0x44, 0x92, 0x61, 0x92, 0x35, 0xab, 0x06, 0x54,
	0xf2, 0xd0, 0x3e, 0xac, 0x9e, 0x8a, 0x01, 0x4f, 0x72, 0x69, 0x07, 0x03, 0xce, 0x84, 0xc8, 0x72,
	0x69, 0xce, 0x24, 0x9b, 0xb0, 0x1a, 0xa8, 0x8e, 0x7c, 0xd5, 0x12, 0xaf, 0x13, 0x23, 0xaa, 0xc1,
	0x0a, 0x87, 0xfe, 0x88, 0x5b, 0xb6, 0xd5, 0xc0, 0x29, 0x29, 0x79, 0x28, 0x40, 0xed, 0x04, 0xe3,
	0x58, 0x30, 0xbc, 0xa6, 0x7f, 0x7b, 0xb9, 0xa1, 0x52, 0xf2, 0x18, 0xaa, 0x27, 0x18, 0x46, 0xe6,
	0x6b, 0xf5, 0xdd, 0x4f, 0x77, 0x66, 0x74, 0x61, 0x87, 0xa9, 0x54, 0x63, 0x99, 0x61, 0x90, 0x7d,
	0xf0, 0x6d, 0x59, 0x8d, 0x9a, 0xfa, 0xee, 0x97, 0x33, 0xb9, 0x53, 0x1d, 0x60, 0x8e, 0x49, 0x5a,
	0xa5, 0xdc, 0x8d, 0xea, 0xfa, 0xee, 0xe7, 0x33, 0xc3, 0x4c, 0xd0, 0xac, 0x20, 0xd2, 0x7f, 0x3c,
	0xa8, 0xf5, 0x14, 0xca, 0x56, 0x98, 0x85, 0xe4, 0x01, 0x54, 0x7a, 0x41, 0xcb, 0x55, 0x4f, 0x2f,
	0xc9, 0x13, 0xa8, 0x1e, 0x08, 0x89, 0x4e, 0xe6, 0x67, 0x33, 0xe3, 0xeb, 0x30, 0x1a, 0xcc, 0x0c,
	0x85, 0x3c, 0x03, 0xbf, 0x23, 0xfa, 0x3c, 0x8c, 0x9d, 0xb8, 0x2f, 0xee, 0x24, 0x5b, 0x38, 0x73,
	0x34, 0x13, 0x20, 0x0b, 0x33, 0xae, 0x4c, 0xe3, 0xe7, 0x0a, 0x60, 0xe0, 0xcc, 0xd1, 0xe8, 0x1f,
	0x1e, 0xd4, 0x4c, 0xa6, 0x0c, 0xaf, 0xc9, 0xd7, 0x50, 0xed, 0x8e, 0x53, 0x34, 0xc9, 0xad, 0xdf,
	0x11, 0xeb, 0xf4, 0xfc, 0x38, 0x38, 0xfb, 0xa1, 0xfb, 0xfd, 0xc5, 0x21, 0x33, 0x24, 0xb2, 0x05,
	0xf5, 0xbd, 0x7e, 0x1f, 0x95, 0xea, 0x8a, 0x2b, 0x4c, 0xdc, 0xb9, 0x2e, 0xbb, 0xc8, 0x73, 0xf0,
	0x8f, 0x31, 0x89, 0x50, 0x9a, 0x6c, 0xd7, 0x77, 0xb7, 0x67, 0x7e, 0xe0, 0xf8, 0xf0, 0xac, 0x75,
	0xc8, 0xec, 0x17, 0x1c, 0x8f, 0xfe, 0xb5, 0x94, 0xab, 0x5d, 0xe8, 0x68, 0xed, 0x15, 0xfd, 0x9c,
	0xbb, 0x6b, 0x1a, 0xcc, 0x8a, 0x63, 0xb0, 0x09, 0xab, 0x87, 0x49, 0x5f, 0x44, 0xf8, 0x02, 0xc7,
	0xee, 0x3e, 0x14, 0x0e, 0xbd, 0xfb, 0x02, 0xc7, 0x87, 0x37, 0x29, 0x97, 0x68, 0x3a, 0xd3, 0x60,
	0x85, 0xa3, 0x7c, 0x09, 0x97, 0xa7, 0x2f, 0xe1, 0x43, 0xf0, 0x0f, 0x84, 0xb8, 0xe2, 0xd8, 0xf4,
	0xcd, 0x86, 0xb3, 0xc8, 0x73, 0x58, 0x66, 0x62, 0x94, 0x44, 0xcd, 0x95, 0x39, 0xae, 0x82, 0xd6,
	0x78, 0x1c, 0x0e, 0xd1, 0x30, 0x98, 0x25, 0xd2, 0x8f, 0x61, 0x85, 0x85, 0xc9, 0x95, 0xee, 0x32,
	0x29, 0x75, 0xb9, 0x61, 0x9b, 0x47, 0xdf, 0xba, 0xed, 0x85, 0xca, 0xfa, 0x04, 0xaa, 0xa7, 0xdc,
	0x8c, 0xb4, 0xca, 0x5c, 0x25, 0xed, 0x8c, 0x86, 0x43, 0x66, 0x28, 0xf4, 0x13, 0x68, 0x1c, 0x49,
	0x8e, 0x49, 0xa4, 0xad, 0xdb, 0x44, 0xfe, 0xec, 0x4d, 0xa1, 0xee, 0x4b, 0xeb, 0x9f, 0x1e, 0xc0,
	0x79, 0x2a, 0x4f, 0xb8, 0xca, 0x84, 0x1c, 0xeb, 0x9e, 0x05, 0x19, 0x0e, 0x27, 0x33, 0xc1, 0x59,
	0x84, 0xc2, 0xda, 0x91, 0x14, 0xc3, 0x03, 0x11, 0x07, 0x49, 0x84, 0x37, 0x6e, 0xa6, 0x4e, 0xf9,
	0x72, 0x0c, 0x13, 0xaf, 0x2d, 0xa6, 0x52, 0x60, 0x72, 0x9f, 0x1e, 0xbd, 0x5d, 0x31, 0x89, 0x62,
	0x0f, 0x53, 0xc9, 0x63, 0xf7, 0x27, 0x11, 0x96, 0xf3, 0xfd, 0xdc, 0x43, 0xc7, 0xb0, 0xde, 0xc1,
	0x2c, 0x8b, 0xdd, 0x79, 0xc0, 0x6b, 0x7d, 0x3a, 0xcd, 0xba, 0x57, 0x0c, 0xb2, 0xc2, 0x41, 0x02,
	0xa8, 0x17, 0xd9, 0x29, 0x57, 0xa0, 0xd9, 0xb3, 0xa0, 0xc0, 0xb3, 0x32, 0x97, 0xfe, 0xe7, 0x4d,
	0x7f, 0x7b, 0xa1, 0x8e, 0x51, 0x58, 0x3b, 0xc3, 0x9b, 0x2c, 0x48, 0x78, 0xd6, 0x41, 0x8c, 0xf2,
	0x7a, 0x96, 0x7d, 0x7a, 0x06, 0x69, 0xfb, 0x3c, 0x95, 0x06, 0x62, 0xcb, 0x59, 0x76, 0x91, 0x0d,
	0xa8, 0x69, 0xd3, 0xa4, 0x6e, 0xdf, 0xca, 0x89, 0x4d, 0x1e, 0xc3, 0xf2, 0x85, 0xe4, 0x6f, 0xd0,
	0x14, 0xb1, 0xbe, 0x4b, 0x67, 0x8a, 0x33, 0x48, 0x66, 0x09, 0xf4, 0x29, 0xd4, 0xf6, 0x47, 0x3c,
	0x36, 0xd5, 0xfd, 0x10, 0x96, 0x6d, 0x2b, 0xec, 0xd1, 0xb5, 0x86, 0xbe, 0xf3, 0x5d, 0x71, 0x8a,
	0xaf, 0x30, 0x76, 0xc2, 0x73, 0x93, 0xfe, 0xe2, 0xe5, 0xe4, 0x85, 0xca, 0xf3, 0x0c, 0xfc, 0x40,
	0xc5, 0x61, 0x92, 0x3f, 0x97, 0x77, 0xbf, 0x04, 0x16, 0xce, 0x1c, 0x8d, 0x7e, 0x63, 0x7a, 0xb5,
	0xdf, 0xd2, 0x0f, 0xc3, 0x48, 0xdd, 0x9e, 0xc9, 0x43, 0xf0, 0x2f, 0xa4, 0x48, 0x83, 0x96, 0x4b,
	0xc4, 0x59, 0xf4, 0x57, 0x6f, 0x3a, 0xc0, 0xfd, 0x66, 0x63, 0x6e, 0x16, 0x77, 0x4e, 0x3b, 0x4f,
	0x82, 0xfc, 0xb8, 0x57, 0x99, 0x59, 0xd3, 0x9f, 0xca, 0x98, 0x85, 0xe4, 0x6e, 0x40, 0xcd, 0x86,
	0x39, 0x13, 0xae, 0x2a, 0x13, 0x5b, 0xd7, 0x6b, 0xbf, 0x65, 0x66, 0x4d, 0x65, 0xab, 0xa2, 0xeb,
	0x65, 0x2d, 0xfa, 0x1d, 0x34, 0x2c, 0xe6, 0x48, 0x72, 0x3d, 0x5d, 0xc8, 0x31, 0xd4, 0xdd, 0xd2,
	0xa0, 0xbd, 0xf7, 0x99, 0x4c, 0x65, 0x26, 0x5d, 0x87, 0x35, 0x1b, 0xb9, 0x1d, 0xa6, 0xfa, 0x87,
	0xec, 0x5f, 0xaf, 0xec, 0xb8, 0xd7, 0xbe, 0x90, 0x8b, 0x52, 0xd6, 0x93, 0xa2, 0xdc, 0xf5, 0xa2,
	0x4d, 0xd5, 0x89, 0x4d, 0x07, 0xa0, 0x9b, 0xe0, 0xb7, 0xd5, 0xe0, 0xb6, 0x37, 0xe3, 0x77, 0xcf,
	0x6e, 0x2f, 0x94, 0xf5, 0x03, 0xa8, 0xe8, 0xdf, 0x5e, 0xfb, 0x4b, 0xa3, 0x97, 0xe4, 0xa9, 0xbe,
	0x04, 0xfc, 0x0d, 0x2a, 0xa7, 0x7f, 0x9e, 0x59, 0xe1, 0x18, 0x7a, 0x14, 0xb4, 0xd5, 0xa0, 0xcb,
	0x87, 0xf9, 0xaf, 0x41, 0x6e, 0xd2, 0x47, 0xe0, 0xef, 0x8f, 0xc6, 0xee, 0xea, 0xb5, 0x51, 0xba,
	0xf3, 0xda, 0x60, 0xd6, 0xa0, 0x6f, 0xed, 0xfe, 0x42, 0xb9, 0x14, 0xca, 0x97, 0xde, 0x57, 0xf9,
	0xa5, 0x6f, 0x9c, 0x5f, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x78, 0xfe, 0xe1, 0x58, 0x0d,
	0x00, 0x00,
}
