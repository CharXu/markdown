// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inner_game.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AccLoginReq struct {
	AccessToken string     `protobuf:"bytes,1,opt,name=AccessToken" json:"AccessToken,omitempty"`
	Type        LOGIN_TYPE `protobuf:"varint,2,opt,name=Type,enum=aladinfun.TripleDream.proto.LOGIN_TYPE" json:"Type,omitempty"`
}

func (m *AccLoginReq) Reset()                    { *m = AccLoginReq{} }
func (m *AccLoginReq) String() string            { return proto.CompactTextString(m) }
func (*AccLoginReq) ProtoMessage()               {}
func (*AccLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *AccLoginReq) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AccLoginReq) GetType() LOGIN_TYPE {
	if m != nil {
		return m.Type
	}
	return LOGIN_TYPE_LOGIN_TYPE_INIT
}

type AccLoginRsp struct {
	Head   *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Social *UserSocial `protobuf:"bytes,2,opt,name=social" json:"social,omitempty"`
}

func (m *AccLoginRsp) Reset()                    { *m = AccLoginRsp{} }
func (m *AccLoginRsp) String() string            { return proto.CompactTextString(m) }
func (*AccLoginRsp) ProtoMessage()               {}
func (*AccLoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *AccLoginRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AccLoginRsp) GetSocial() *UserSocial {
	if m != nil {
		return m.Social
	}
	return nil
}

type CoreGetUserCoreReq struct {
	IsRegister uint32 `protobuf:"varint,1,opt,name=IsRegister" json:"IsRegister,omitempty"`
}

func (m *CoreGetUserCoreReq) Reset()                    { *m = CoreGetUserCoreReq{} }
func (m *CoreGetUserCoreReq) String() string            { return proto.CompactTextString(m) }
func (*CoreGetUserCoreReq) ProtoMessage()               {}
func (*CoreGetUserCoreReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CoreGetUserCoreReq) GetIsRegister() uint32 {
	if m != nil {
		return m.IsRegister
	}
	return 0
}

type CoreGetUserCoreRsp struct {
	Head *RspHead  `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Core *UserCore `protobuf:"bytes,2,opt,name=Core" json:"Core,omitempty"`
}

func (m *CoreGetUserCoreRsp) Reset()                    { *m = CoreGetUserCoreRsp{} }
func (m *CoreGetUserCoreRsp) String() string            { return proto.CompactTextString(m) }
func (*CoreGetUserCoreRsp) ProtoMessage()               {}
func (*CoreGetUserCoreRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *CoreGetUserCoreRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *CoreGetUserCoreRsp) GetCore() *UserCore {
	if m != nil {
		return m.Core
	}
	return nil
}

type CoreChgUserCoreReq struct {
	Diamond int32 `protobuf:"zigzag32,1,opt,name=Diamond" json:"Diamond,omitempty"`
	Gold    int64 `protobuf:"zigzag64,2,opt,name=Gold" json:"Gold,omitempty"`
	Step    int32 `protobuf:"zigzag32,3,opt,name=Step" json:"Step,omitempty"`
}

func (m *CoreChgUserCoreReq) Reset()                    { *m = CoreChgUserCoreReq{} }
func (m *CoreChgUserCoreReq) String() string            { return proto.CompactTextString(m) }
func (*CoreChgUserCoreReq) ProtoMessage()               {}
func (*CoreChgUserCoreReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *CoreChgUserCoreReq) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *CoreChgUserCoreReq) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CoreChgUserCoreReq) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

type CoreChgUserCoreRsp struct {
	Head *RspHead  `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Core *UserCore `protobuf:"bytes,2,opt,name=Core" json:"Core,omitempty"`
}

func (m *CoreChgUserCoreRsp) Reset()                    { *m = CoreChgUserCoreRsp{} }
func (m *CoreChgUserCoreRsp) String() string            { return proto.CompactTextString(m) }
func (*CoreChgUserCoreRsp) ProtoMessage()               {}
func (*CoreChgUserCoreRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *CoreChgUserCoreRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *CoreChgUserCoreRsp) GetCore() *UserCore {
	if m != nil {
		return m.Core
	}
	return nil
}

type CoreBuildReq struct {
	Gold    uint32 `protobuf:"varint,1,opt,name=Gold" json:"Gold,omitempty"`
	Index   uint32 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
	ToLevel uint32 `protobuf:"varint,3,opt,name=ToLevel" json:"ToLevel,omitempty"`
}

func (m *CoreBuildReq) Reset()                    { *m = CoreBuildReq{} }
func (m *CoreBuildReq) String() string            { return proto.CompactTextString(m) }
func (*CoreBuildReq) ProtoMessage()               {}
func (*CoreBuildReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *CoreBuildReq) GetGold() uint32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *CoreBuildReq) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CoreBuildReq) GetToLevel() uint32 {
	if m != nil {
		return m.ToLevel
	}
	return 0
}

type CoreBuildRsp struct {
	Head   *RspHead    `protobuf:"bytes,1,opt,name=Head" json:"Head,omitempty"`
	Island *UserIsland `protobuf:"bytes,2,opt,name=Island" json:"Island,omitempty"`
}

func (m *CoreBuildRsp) Reset()                    { *m = CoreBuildRsp{} }
func (m *CoreBuildRsp) String() string            { return proto.CompactTextString(m) }
func (*CoreBuildRsp) ProtoMessage()               {}
func (*CoreBuildRsp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *CoreBuildRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *CoreBuildRsp) GetIsland() *UserIsland {
	if m != nil {
		return m.Island
	}
	return nil
}

func init() {
	proto.RegisterType((*AccLoginReq)(nil), "aladinfun.TripleDream.proto.AccLoginReq")
	proto.RegisterType((*AccLoginRsp)(nil), "aladinfun.TripleDream.proto.AccLoginRsp")
	proto.RegisterType((*CoreGetUserCoreReq)(nil), "aladinfun.TripleDream.proto.CoreGetUserCoreReq")
	proto.RegisterType((*CoreGetUserCoreRsp)(nil), "aladinfun.TripleDream.proto.CoreGetUserCoreRsp")
	proto.RegisterType((*CoreChgUserCoreReq)(nil), "aladinfun.TripleDream.proto.CoreChgUserCoreReq")
	proto.RegisterType((*CoreChgUserCoreRsp)(nil), "aladinfun.TripleDream.proto.CoreChgUserCoreRsp")
	proto.RegisterType((*CoreBuildReq)(nil), "aladinfun.TripleDream.proto.CoreBuildReq")
	proto.RegisterType((*CoreBuildRsp)(nil), "aladinfun.TripleDream.proto.CoreBuildRsp")
}

func init() { proto.RegisterFile("inner_game.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x89, 0xc6, 0xaa, 0x53, 0x2b, 0x3a, 0x78, 0x08, 0x0a, 0x52, 0x82, 0x62, 0x4f, 0x39,
	0x54, 0x0f, 0x8a, 0x07, 0xd1, 0x56, 0x6a, 0xa0, 0xa8, 0x4c, 0xa3, 0xb0, 0xa7, 0x32, 0x6d, 0xde,
	0x66, 0x87, 0x9d, 0xce, 0x64, 0x67, 0x92, 0x65, 0xf7, 0x3f, 0xd8, 0xfd, 0xaf, 0x97, 0x79, 0x93,
	0x94, 0xc0, 0x42, 0xbb, 0xd0, 0xc3, 0x9e, 0xfa, 0xbd, 0x99, 0xf7, 0xbd, 0xf7, 0xfd, 0x9a, 0x21,
	0x2f, 0x84, 0x52, 0x60, 0x96, 0x05, 0xdf, 0x40, 0x52, 0x1a, 0x5d, 0x69, 0xfa, 0x86, 0x4b, 0x9e,
	0x0b, 0x75, 0x5c, 0xab, 0x24, 0x33, 0xa2, 0x94, 0x30, 0x35, 0xc0, 0x37, 0xfe, 0xf2, 0x35, 0x01,
	0x55, 0x6f, 0xf5, 0x8a, 0x5b, 0x68, 0x75, 0x6d, 0xc1, 0x34, 0xfa, 0x49, 0xbe, 0xf2, 0x2a, 0x96,
	0xa4, 0xff, 0x7d, 0xbd, 0x9e, 0xeb, 0x42, 0x28, 0x06, 0x67, 0x74, 0x88, 0x25, 0x58, 0x9b, 0xe9,
	0x53, 0x50, 0x51, 0x30, 0x0c, 0x46, 0x4f, 0x59, 0xf7, 0x88, 0x7e, 0x25, 0x61, 0x76, 0x59, 0x42,
	0xf4, 0x60, 0x18, 0x8c, 0x9e, 0x8f, 0x3f, 0x24, 0x3b, 0xa2, 0x24, 0xf3, 0x3f, 0xb3, 0xf4, 0xf7,
	0x32, 0x3b, 0xfa, 0xfb, 0x93, 0xa1, 0x29, 0xbe, 0x0a, 0x3a, 0xeb, 0x6c, 0x49, 0x3f, 0x93, 0xf0,
	0x17, 0xf0, 0x1c, 0xf7, 0xf4, 0xc7, 0xef, 0x76, 0x0e, 0x63, 0xb6, 0x74, 0xbd, 0x0c, 0x1d, 0xf4,
	0x1b, 0xe9, 0x59, 0xbd, 0x16, 0x5c, 0x62, 0x90, 0xfe, 0x9e, 0x20, 0xff, 0x2c, 0x98, 0x05, 0xb6,
	0xb3, 0xc6, 0x16, 0x7f, 0x22, 0x74, 0xa2, 0x0d, 0xcc, 0xa0, 0x72, 0x97, 0x4e, 0x3a, 0xfe, 0xb7,
	0x84, 0xa4, 0x96, 0x41, 0x21, 0x6c, 0x05, 0x06, 0x63, 0x0d, 0x58, 0xe7, 0x24, 0xbe, 0x0e, 0x6e,
	0xdb, 0x0e, 0xe2, 0xf8, 0x42, 0x42, 0x37, 0xa4, 0xa1, 0x78, 0xbf, 0x97, 0x02, 0x37, 0xa2, 0x25,
	0xfe, 0xef, 0xa3, 0x4c, 0x4e, 0x8a, 0x2e, 0x41, 0x44, 0x1e, 0x4f, 0x05, 0xdf, 0x68, 0xe5, 0xd3,
	0xbc, 0x64, 0x6d, 0x49, 0x29, 0x09, 0x67, 0x5a, 0xe6, 0xb8, 0x8a, 0x32, 0xd4, 0xee, 0x6c, 0x51,
	0x41, 0x19, 0x3d, 0xc4, 0x56, 0xd4, 0x5b, 0xc6, 0xee, 0xe0, 0xfb, 0x62, 0x64, 0xe4, 0x99, 0xfb,
	0xfd, 0x51, 0x0b, 0x99, 0x3b, 0xba, 0x96, 0xc1, 0x7f, 0x19, 0xcf, 0xf0, 0x8a, 0x3c, 0x4a, 0x55,
	0x0e, 0x17, 0x38, 0x7f, 0xc0, 0x7c, 0xe1, 0xfe, 0x87, 0x4c, 0xcf, 0xe1, 0x1c, 0x24, 0xc2, 0x0d,
	0x58, 0x5b, 0x3a, 0xbe, 0xce, 0xd0, 0x43, 0x5f, 0x61, 0x6a, 0x25, 0x57, 0xf9, 0x9d, 0x5f, 0xa1,
	0x6f, 0x67, 0x8d, 0x6d, 0xd5, 0xc3, 0x9b, 0x8f, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0x73,
	0x3a, 0xf0, 0xe4, 0x03, 0x00, 0x00,
}
