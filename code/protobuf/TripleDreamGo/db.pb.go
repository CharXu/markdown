// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// summary user data
// for social play to show
// storage structure: redis string (proto binary data)
type UserSumm struct {
	UID       string      `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Social    *UserSocial `protobuf:"bytes,2,opt,name=Social" json:"Social,omitempty"`
	Diamond   uint32      `protobuf:"varint,3,opt,name=Diamond" json:"Diamond,omitempty"`
	Gold      uint64      `protobuf:"varint,4,opt,name=Gold" json:"Gold,omitempty"`
	Step      uint32      `protobuf:"varint,5,opt,name=Step" json:"Step,omitempty"`
	CurIsland uint32      `protobuf:"varint,6,opt,name=CurIsland" json:"CurIsland,omitempty"`
	Level     uint32      `protobuf:"varint,7,opt,name=Level" json:"Level,omitempty"`
}

func (m *UserSumm) Reset()                    { *m = UserSumm{} }
func (m *UserSumm) String() string            { return proto.CompactTextString(m) }
func (*UserSumm) ProtoMessage()               {}
func (*UserSumm) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UserSumm) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *UserSumm) GetSocial() *UserSocial {
	if m != nil {
		return m.Social
	}
	return nil
}

func (m *UserSumm) GetDiamond() uint32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *UserSumm) GetGold() uint64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *UserSumm) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *UserSumm) GetCurIsland() uint32 {
	if m != nil {
		return m.CurIsland
	}
	return 0
}

func (m *UserSumm) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// user basic information
// storage structure：redis dictionary
// {
//     "Uid": 10001,
//     ...
// }
type UserCore struct {
	Diamond uint32      `protobuf:"varint,1,opt,name=Diamond" json:"Diamond,omitempty"`
	Gold    uint64      `protobuf:"varint,2,opt,name=Gold" json:"Gold,omitempty"`
	Step    uint32      `protobuf:"varint,3,opt,name=Step" json:"Step,omitempty"`
	Island  *UserIsland `protobuf:"bytes,4,opt,name=Island" json:"Island,omitempty"`
}

func (m *UserCore) Reset()                    { *m = UserCore{} }
func (m *UserCore) String() string            { return proto.CompactTextString(m) }
func (*UserCore) ProtoMessage()               {}
func (*UserCore) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *UserCore) GetDiamond() uint32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *UserCore) GetGold() uint64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *UserCore) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *UserCore) GetIsland() *UserIsland {
	if m != nil {
		return m.Island
	}
	return nil
}

// user statistics
// storage structure: redis string (proto binary data)
type UserStatis struct {
	Put        []*StatisComp `protobuf:"bytes,1,rep,name=Put" json:"Put,omitempty"`
	Synthesize []*StatisComp `protobuf:"bytes,2,rep,name=Synthesize" json:"Synthesize,omitempty"`
	Buy        []*StatisComp `protobuf:"bytes,3,rep,name=Buy" json:"Buy,omitempty"`
	Reset_     uint32        `protobuf:"varint,4,opt,name=Reset" json:"Reset,omitempty"`
}

func (m *UserStatis) Reset()                    { *m = UserStatis{} }
func (m *UserStatis) String() string            { return proto.CompactTextString(m) }
func (*UserStatis) ProtoMessage()               {}
func (*UserStatis) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *UserStatis) GetPut() []*StatisComp {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *UserStatis) GetSynthesize() []*StatisComp {
	if m != nil {
		return m.Synthesize
	}
	return nil
}

func (m *UserStatis) GetBuy() []*StatisComp {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *UserStatis) GetReset_() uint32 {
	if m != nil {
		return m.Reset_
	}
	return 0
}

// user bag
// storage structure：redis dictionary
// {
//     "BagId": {
//         "PropId": UserProp (proto binary data)
//         ...
//     }
//     ...
// }
// @BagId: usually BAG_TYPE enumeration, eg: "1" for BAG_TYPE_USER, except BAG_TYPE_ACTIVITY.
//         BAG_TYPE_ACTIVITY would add "ActivityId" behind, eg: "2:ActivityId".
type UserBag struct {
	BagList []*Bag `protobuf:"bytes,1,rep,name=BagList" json:"BagList,omitempty"`
}

func (m *UserBag) Reset()                    { *m = UserBag{} }
func (m *UserBag) String() string            { return proto.CompactTextString(m) }
func (*UserBag) ProtoMessage()               {}
func (*UserBag) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *UserBag) GetBagList() []*Bag {
	if m != nil {
		return m.BagList
	}
	return nil
}

// user game round
// storage structure: redis string (proto binary data)
type UserGameRound struct {
	Normal *GameRound `protobuf:"bytes,1,opt,name=Normal" json:"Normal,omitempty"`
	Story  *GameRound `protobuf:"bytes,2,opt,name=Story" json:"Story,omitempty"`
}

func (m *UserGameRound) Reset()                    { *m = UserGameRound{} }
func (m *UserGameRound) String() string            { return proto.CompactTextString(m) }
func (*UserGameRound) ProtoMessage()               {}
func (*UserGameRound) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UserGameRound) GetNormal() *GameRound {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *UserGameRound) GetStory() *GameRound {
	if m != nil {
		return m.Story
	}
	return nil
}

// user message
// storage structure: redis string (proto bianry data)
type UserMsg struct {
	MsgList []*MsgTmpl `protobuf:"bytes,1,rep,name=MsgList" json:"MsgList,omitempty"`
}

func (m *UserMsg) Reset()                    { *m = UserMsg{} }
func (m *UserMsg) String() string            { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()               {}
func (*UserMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *UserMsg) GetMsgList() []*MsgTmpl {
	if m != nil {
		return m.MsgList
	}
	return nil
}

func init() {
	proto.RegisterType((*UserSumm)(nil), "aladinfun.TripleDream.proto.UserSumm")
	proto.RegisterType((*UserCore)(nil), "aladinfun.TripleDream.proto.UserCore")
	proto.RegisterType((*UserStatis)(nil), "aladinfun.TripleDream.proto.UserStatis")
	proto.RegisterType((*UserBag)(nil), "aladinfun.TripleDream.proto.UserBag")
	proto.RegisterType((*UserGameRound)(nil), "aladinfun.TripleDream.proto.UserGameRound")
	proto.RegisterType((*UserMsg)(nil), "aladinfun.TripleDream.proto.UserMsg")
}

func init() { proto.RegisterFile("db.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xdd, 0x6a, 0xdb, 0x30,
	0x14, 0xc7, 0x51, 0x9c, 0xd8, 0xed, 0x29, 0x81, 0x21, 0x76, 0x21, 0xb6, 0x5d, 0x18, 0x33, 0xb6,
	0x5c, 0xe5, 0xa2, 0xbb, 0xda, 0x18, 0x2d, 0x38, 0x19, 0x21, 0xd0, 0x8c, 0x21, 0xb7, 0x0f, 0xa0,
	0xce, 0x9a, 0x67, 0x90, 0x2c, 0xa3, 0x8f, 0x41, 0xf6, 0x0e, 0x7b, 0xba, 0x3d, 0xc1, 0xde, 0x64,
	0x48, 0x72, 0xb6, 0x5c, 0x14, 0xb7, 0xb9, 0x3b, 0x5f, 0xbf, 0xbf, 0xff, 0xe7, 0xc8, 0x70, 0x56,
	0xdf, 0x2f, 0x7b, 0xad, 0xac, 0xc2, 0x2f, 0x99, 0x60, 0x75, 0xdb, 0x7d, 0x73, 0xdd, 0xf2, 0x56,
	0xb7, 0xbd, 0xe0, 0x6b, 0xcd, 0x99, 0x8c, 0xcd, 0x17, 0xe0, 0x0c, 0xd7, 0x31, 0x2e, 0x7e, 0x23,
	0x38, 0xbb, 0x33, 0x5c, 0x57, 0x4e, 0x4a, 0xfc, 0x0c, 0x92, 0xbb, 0xed, 0x9a, 0xa0, 0x1c, 0x2d,
	0xce, 0xa9, 0x0f, 0xf1, 0x35, 0xa4, 0x95, 0xfa, 0xda, 0x32, 0x41, 0x26, 0x39, 0x5a, 0x5c, 0x5c,
	0xbe, 0x5d, 0x8e, 0x08, 0x2f, 0x83, 0x50, 0x18, 0xa7, 0x03, 0x86, 0x09, 0x64, 0xeb, 0x96, 0x49,
	0xd5, 0xd5, 0x24, 0xc9, 0xd1, 0x62, 0x4e, 0x0f, 0x29, 0xc6, 0x30, 0xdd, 0x28, 0x51, 0x93, 0x69,
	0x8e, 0x16, 0x53, 0x1a, 0x62, 0x5f, 0xab, 0x2c, 0xef, 0xc9, 0x2c, 0x8c, 0x86, 0x18, 0xbf, 0x82,
	0xf3, 0x95, 0xd3, 0x5b, 0x23, 0x58, 0x57, 0x93, 0x34, 0x34, 0xfe, 0x17, 0xf0, 0x73, 0x98, 0xdd,
	0xf0, 0x1f, 0x5c, 0x90, 0x2c, 0x74, 0x62, 0x52, 0xfc, 0x1a, 0xb6, 0x5a, 0x29, 0xcd, 0x8f, 0x2d,
	0xa0, 0x87, 0x2d, 0x4c, 0x1e, 0xb0, 0x90, 0x1c, 0x59, 0xb8, 0x86, 0x74, 0xf8, 0xfe, 0xf4, 0x89,
	0x57, 0x88, 0xe3, 0x74, 0xc0, 0x8a, 0x3f, 0x08, 0x20, 0x1c, 0xc7, 0x32, 0xdb, 0x1a, 0xfc, 0x1e,
	0x92, 0x2f, 0xce, 0x12, 0x94, 0x27, 0x8f, 0x8a, 0x45, 0x62, 0xa5, 0x64, 0x4f, 0x3d, 0x83, 0x37,
	0x00, 0xd5, 0xbe, 0xb3, 0xdf, 0xb9, 0x69, 0x7f, 0x72, 0x32, 0x39, 0x4d, 0xe1, 0x08, 0xf5, 0x1e,
	0x4a, 0xb7, 0x27, 0xc9, 0x89, 0x1e, 0x4a, 0xb7, 0xf7, 0x37, 0xa7, 0xdc, 0x70, 0x1b, 0xae, 0x31,
	0xa7, 0x31, 0x29, 0x3e, 0x41, 0xe6, 0x57, 0x2c, 0x59, 0x83, 0x3f, 0x40, 0x56, 0xb2, 0xe6, 0xa6,
	0x35, 0x87, 0x1d, 0xf3, 0x51, 0xfd, 0x92, 0x35, 0xf4, 0x00, 0xf8, 0xa7, 0x9b, 0x7b, 0x9d, 0x0d,
	0x93, 0x9c, 0x2a, 0xd7, 0xd5, 0xf8, 0x0a, 0xd2, 0xcf, 0x4a, 0x4b, 0x26, 0xc2, 0xf3, 0x5d, 0x5c,
	0xbe, 0x19, 0x15, 0xfb, 0xc7, 0xd1, 0x81, 0xc2, 0x1f, 0x61, 0x56, 0x59, 0xa5, 0xf7, 0xc3, 0x2f,
	0xfc, 0x54, 0x3c, 0x42, 0xc5, 0x36, 0xae, 0xb5, 0x33, 0x0d, 0xbe, 0x82, 0x6c, 0x67, 0x8e, 0xd7,
	0x7a, 0x3d, 0x2a, 0xb5, 0x33, 0xcd, 0xad, 0xec, 0x05, 0x3d, 0x40, 0xf7, 0x69, 0xa8, 0xbf, 0xfb,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x25, 0xaa, 0x9d, 0x38, 0xa7, 0x03, 0x00, 0x00,
}
