// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// user social information
type UserSocial struct {
	SiteUID string      `protobuf:"bytes,1,opt,name=SiteUID" json:"SiteUID,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Headurl string      `protobuf:"bytes,3,opt,name=Headurl" json:"Headurl,omitempty"`
	HeadID  uint32      `protobuf:"varint,4,opt,name=HeadID" json:"HeadID,omitempty"`
	Gender  GENDER_TYPE `protobuf:"varint,5,opt,name=Gender,enum=aladinfun.TripleDream.proto.GENDER_TYPE" json:"Gender,omitempty"`
	Email   string      `protobuf:"bytes,6,opt,name=Email" json:"Email,omitempty"`
}

func (m *UserSocial) Reset()                    { *m = UserSocial{} }
func (m *UserSocial) String() string            { return proto.CompactTextString(m) }
func (*UserSocial) ProtoMessage()               {}
func (*UserSocial) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *UserSocial) GetSiteUID() string {
	if m != nil {
		return m.SiteUID
	}
	return ""
}

func (m *UserSocial) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserSocial) GetHeadurl() string {
	if m != nil {
		return m.Headurl
	}
	return ""
}

func (m *UserSocial) GetHeadID() uint32 {
	if m != nil {
		return m.HeadID
	}
	return 0
}

func (m *UserSocial) GetGender() GENDER_TYPE {
	if m != nil {
		return m.Gender
	}
	return GENDER_TYPE_GENDER_TYPE_INIT
}

func (m *UserSocial) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserProp struct {
	ID     uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Num    uint32 `protobuf:"varint,2,opt,name=Num" json:"Num,omitempty"`
	Expire uint32 `protobuf:"varint,3,opt,name=Expire" json:"Expire,omitempty"`
}

func (m *UserProp) Reset()                    { *m = UserProp{} }
func (m *UserProp) String() string            { return proto.CompactTextString(m) }
func (*UserProp) ProtoMessage()               {}
func (*UserProp) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *UserProp) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserProp) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *UserProp) GetExpire() uint32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type Bag struct {
	Type     BAG_TYPE    `protobuf:"varint,1,opt,name=Type,enum=aladinfun.TripleDream.proto.BAG_TYPE" json:"Type,omitempty"`
	PropList []*UserProp `protobuf:"bytes,2,rep,name=PropList" json:"PropList,omitempty"`
}

func (m *Bag) Reset()                    { *m = Bag{} }
func (m *Bag) String() string            { return proto.CompactTextString(m) }
func (*Bag) ProtoMessage()               {}
func (*Bag) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *Bag) GetType() BAG_TYPE {
	if m != nil {
		return m.Type
	}
	return BAG_TYPE_BAG_TYPE_INIT
}

func (m *Bag) GetPropList() []*UserProp {
	if m != nil {
		return m.PropList
	}
	return nil
}

// component statistics
type StatisComp struct {
	CompID uint32 `protobuf:"varint,1,opt,name=CompID" json:"CompID,omitempty"`
	Times  uint32 `protobuf:"varint,2,opt,name=Times" json:"Times,omitempty"`
}

func (m *StatisComp) Reset()                    { *m = StatisComp{} }
func (m *StatisComp) String() string            { return proto.CompactTextString(m) }
func (*StatisComp) ProtoMessage()               {}
func (*StatisComp) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *StatisComp) GetCompID() uint32 {
	if m != nil {
		return m.CompID
	}
	return 0
}

func (m *StatisComp) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// game round
type GameRound struct {
	ID       uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	InitSeed uint32 `protobuf:"varint,2,opt,name=InitSeed" json:"InitSeed,omitempty"`
	OprSeed  uint32 `protobuf:"varint,3,opt,name=OprSeed" json:"OprSeed,omitempty"`
	UUID     string `protobuf:"bytes,4,opt,name=UUID" json:"UUID,omitempty"`
	Version  uint32 `protobuf:"varint,5,opt,name=Version" json:"Version,omitempty"`
}

func (m *GameRound) Reset()                    { *m = GameRound{} }
func (m *GameRound) String() string            { return proto.CompactTextString(m) }
func (*GameRound) ProtoMessage()               {}
func (*GameRound) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *GameRound) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GameRound) GetInitSeed() uint32 {
	if m != nil {
		return m.InitSeed
	}
	return 0
}

func (m *GameRound) GetOprSeed() uint32 {
	if m != nil {
		return m.OprSeed
	}
	return 0
}

func (m *GameRound) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GameRound) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MsgTmpl struct {
	TmplID    uint32   `protobuf:"varint,1,opt,name=TmplID" json:"TmplID,omitempty"`
	ParamList []string `protobuf:"bytes,2,rep,name=ParamList" json:"ParamList,omitempty"`
	Prize     []*Prize `protobuf:"bytes,3,rep,name=Prize" json:"Prize,omitempty"`
	Time      uint64   `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty"`
}

func (m *MsgTmpl) Reset()                    { *m = MsgTmpl{} }
func (m *MsgTmpl) String() string            { return proto.CompactTextString(m) }
func (*MsgTmpl) ProtoMessage()               {}
func (*MsgTmpl) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *MsgTmpl) GetTmplID() uint32 {
	if m != nil {
		return m.TmplID
	}
	return 0
}

func (m *MsgTmpl) GetParamList() []string {
	if m != nil {
		return m.ParamList
	}
	return nil
}

func (m *MsgTmpl) GetPrize() []*Prize {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *MsgTmpl) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// @IslandNo starting from 1
// @BDList double-digit, ten digit refers to building level, units digit indicate whether or not the building were looted.
//         "0" refers to "none", "1" refers to "looted".
type UserIsland struct {
	IslandNo uint32      `protobuf:"varint,1,opt,name=IslandNo" json:"IslandNo,omitempty"`
	BDList   []uint32    `protobuf:"varint,2,rep,packed,name=BDList" json:"BDList,omitempty"`
	BDStatus []BD_STATUS `protobuf:"varint,3,rep,packed,name=BDStatus,enum=aladinfun.TripleDream.proto.BD_STATUS" json:"BDStatus,omitempty"`
}

func (m *UserIsland) Reset()                    { *m = UserIsland{} }
func (m *UserIsland) String() string            { return proto.CompactTextString(m) }
func (*UserIsland) ProtoMessage()               {}
func (*UserIsland) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *UserIsland) GetIslandNo() uint32 {
	if m != nil {
		return m.IslandNo
	}
	return 0
}

func (m *UserIsland) GetBDList() []uint32 {
	if m != nil {
		return m.BDList
	}
	return nil
}

func (m *UserIsland) GetBDStatus() []BD_STATUS {
	if m != nil {
		return m.BDStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*UserSocial)(nil), "aladinfun.TripleDream.proto.UserSocial")
	proto.RegisterType((*UserProp)(nil), "aladinfun.TripleDream.proto.UserProp")
	proto.RegisterType((*Bag)(nil), "aladinfun.TripleDream.proto.Bag")
	proto.RegisterType((*StatisComp)(nil), "aladinfun.TripleDream.proto.StatisComp")
	proto.RegisterType((*GameRound)(nil), "aladinfun.TripleDream.proto.GameRound")
	proto.RegisterType((*MsgTmpl)(nil), "aladinfun.TripleDream.proto.MsgTmpl")
	proto.RegisterType((*UserIsland)(nil), "aladinfun.TripleDream.proto.UserIsland")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0xab, 0xd4, 0x30,
	0x14, 0xc5, 0xe9, 0xcc, 0xbc, 0x79, 0xd3, 0xab, 0x1d, 0x24, 0x88, 0x94, 0xa7, 0x8b, 0xa1, 0xa0,
	0x74, 0x35, 0x8b, 0x71, 0xa3, 0xae, 0x9c, 0xda, 0x32, 0x16, 0x74, 0x1c, 0xd2, 0x56, 0x70, 0xf5,
	0x88, 0xaf, 0xf1, 0x11, 0xe8, 0x3f, 0x92, 0x16, 0xd4, 0x8d, 0x0b, 0xdd, 0xfa, 0xad, 0xfc, 0x60,
	0x72, 0x93, 0xb4, 0x6f, 0x21, 0x8c, 0xab, 0xdc, 0x93, 0xdc, 0xd3, 0xfe, 0x72, 0x6e, 0x00, 0x06,
	0xc5, 0xe5, 0xb6, 0x93, 0x6d, 0xdf, 0x92, 0xc7, 0xac, 0x62, 0xa5, 0x68, 0xbe, 0x0c, 0xcd, 0x36,
	0x97, 0xa2, 0xab, 0x78, 0x2c, 0x39, 0xab, 0xcd, 0xe1, 0x15, 0xf0, 0x66, 0x18, 0xeb, 0xfb, 0xaa,
	0x97, 0xc3, 0x4d, 0x6f, 0x54, 0xf0, 0xc7, 0x01, 0x28, 0x14, 0x97, 0x59, 0x7b, 0x23, 0x58, 0x45,
	0x7c, 0xb8, 0xcc, 0x44, 0xcf, 0x8b, 0x34, 0xf6, 0x9d, 0x8d, 0x13, 0xba, 0x74, 0x94, 0x84, 0xc0,
	0xe2, 0xc8, 0x6a, 0xee, 0xcf, 0xf4, 0xb6, 0xae, 0xb1, 0xfb, 0x2d, 0x67, 0xe5, 0x20, 0x2b, 0x7f,
	0x6e, 0xba, 0xad, 0x24, 0x8f, 0x60, 0x89, 0x65, 0x1a, 0xfb, 0x8b, 0x8d, 0x13, 0x7a, 0xd4, 0x2a,
	0xf2, 0x1a, 0x96, 0x07, 0xde, 0x94, 0x5c, 0xfa, 0x17, 0x1b, 0x27, 0x5c, 0xef, 0xc2, 0xed, 0x19,
	0xec, 0xed, 0x21, 0x39, 0xc6, 0x09, 0xbd, 0xce, 0x3f, 0x9d, 0x12, 0x6a, 0x7d, 0xe4, 0x21, 0x5c,
	0x24, 0x35, 0x13, 0x95, 0xbf, 0xd4, 0x7f, 0x34, 0x22, 0x88, 0x61, 0x85, 0xb7, 0x38, 0xc9, 0xb6,
	0x23, 0x6b, 0x98, 0x59, 0x7c, 0x8f, 0xce, 0xd2, 0x98, 0x3c, 0x80, 0xf9, 0x71, 0xa8, 0x35, 0xb8,
	0x47, 0xb1, 0x44, 0xba, 0xe4, 0x6b, 0x27, 0x24, 0xd7, 0xd8, 0x1e, 0xb5, 0x2a, 0xf8, 0xe9, 0xc0,
	0x3c, 0x62, 0xb7, 0xe4, 0x25, 0x2c, 0xf2, 0x6f, 0x1d, 0xd7, 0xdf, 0x58, 0xef, 0x9e, 0x9e, 0x65,
	0x8c, 0xf6, 0x07, 0x03, 0xa8, 0x2d, 0x64, 0x0f, 0x2b, 0x84, 0x78, 0x27, 0x54, 0xef, 0xcf, 0x36,
	0xf3, 0xf0, 0xde, 0x7f, 0xec, 0x23, 0x35, 0x9d, 0x6c, 0xc1, 0x2b, 0x80, 0xac, 0x67, 0xbd, 0x50,
	0x6f, 0xda, 0xba, 0x43, 0x56, 0x5c, 0xa7, 0x1b, 0x59, 0x85, 0x39, 0xe4, 0xa2, 0xe6, 0xca, 0xde,
	0xcb, 0x88, 0xe0, 0x07, 0xb8, 0x07, 0x56, 0x73, 0xda, 0x0e, 0x4d, 0xf9, 0x4f, 0x10, 0x57, 0xb0,
	0x4a, 0x1b, 0xd1, 0x67, 0x9c, 0x97, 0xd6, 0x35, 0x69, 0x1c, 0xe5, 0x87, 0x4e, 0xea, 0x23, 0x93,
	0xc9, 0x28, 0x71, 0xf0, 0x45, 0x61, 0x07, 0xe9, 0x52, 0x5d, 0x63, 0xf7, 0x47, 0x2e, 0x95, 0x68,
	0x1b, 0x3d, 0x47, 0x8f, 0x8e, 0x32, 0xf8, 0xed, 0xc0, 0xe5, 0x7b, 0x75, 0x9b, 0xd7, 0x9d, 0x7e,
	0x04, 0xb8, 0xde, 0xa1, 0x1b, 0x45, 0x9e, 0x80, 0x7b, 0x62, 0x92, 0xd5, 0x53, 0x48, 0x2e, 0xbd,
	0xdb, 0x20, 0x2f, 0xe0, 0xe2, 0x24, 0xc5, 0x77, 0x9c, 0x0d, 0xc6, 0x17, 0x9c, 0x8d, 0x4f, 0x77,
	0x52, 0x63, 0x40, 0x52, 0x4c, 0x41, 0x93, 0x2e, 0xa8, 0xae, 0x83, 0x5f, 0xf6, 0x7d, 0xa7, 0xaa,
	0x62, 0x4d, 0xa9, 0x23, 0xd0, 0xd5, 0xb1, 0xb5, 0x50, 0x93, 0x46, 0xdc, 0x28, 0x9e, 0x98, 0x3c,
	0x6a, 0x15, 0x89, 0x60, 0x15, 0xc5, 0x38, 0x91, 0x41, 0x69, 0xa6, 0xf5, 0xee, 0xd9, 0xf9, 0x17,
	0x11, 0x5f, 0x67, 0xf9, 0x3e, 0x2f, 0x32, 0x3a, 0xf9, 0x3e, 0x2f, 0xf5, 0xd1, 0xf3, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xd3, 0x33, 0x30, 0xb2, 0x03, 0x00, 0x00,
}
