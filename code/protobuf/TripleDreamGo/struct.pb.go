// Code generated by protoc-gen-go. DO NOT EDIT.
// source: struct.proto

package aladinfun_TripleDream_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// synthetic component
type Component struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Component) Reset()                    { *m = Component{} }
func (m *Component) String() string            { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()               {}
func (*Component) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Component) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Prize struct {
	Type  uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data1 uint32 `protobuf:"varint,2,opt,name=data1" json:"data1,omitempty"`
	Data2 uint32 `protobuf:"varint,3,opt,name=data2" json:"data2,omitempty"`
	Data3 uint32 `protobuf:"varint,4,opt,name=data3" json:"data3,omitempty"`
}

func (m *Prize) Reset()                    { *m = Prize{} }
func (m *Prize) String() string            { return proto.CompactTextString(m) }
func (*Prize) ProtoMessage()               {}
func (*Prize) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Prize) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Prize) GetData1() uint32 {
	if m != nil {
		return m.Data1
	}
	return 0
}

func (m *Prize) GetData2() uint32 {
	if m != nil {
		return m.Data2
	}
	return 0
}

func (m *Prize) GetData3() uint32 {
	if m != nil {
		return m.Data3
	}
	return 0
}

func init() {
	proto.RegisterType((*Component)(nil), "aladinfun.TripleDream.proto.Component")
	proto.RegisterType((*Prize)(nil), "aladinfun.TripleDream.proto.Prize")
}

func init() { proto.RegisterFile("struct.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4e, 0xcc, 0x49, 0x4c, 0xc9, 0xcc,
	0x4b, 0x2b, 0xcd, 0xd3, 0x0b, 0x29, 0xca, 0x2c, 0xc8, 0x49, 0x75, 0x29, 0x4a, 0x4d, 0xcc, 0x85,
	0x48, 0x4a, 0x71, 0xa5, 0xe6, 0x95, 0x42, 0xd9, 0x4a, 0xd2, 0x5c, 0x9c, 0xce, 0xf9, 0xb9, 0x05,
	0xf9, 0x79, 0xa9, 0x79, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x4c, 0x9e, 0x2e, 0x4a, 0xb1, 0x5c, 0xac, 0x01, 0x45, 0x99, 0x55, 0xa9, 0x42, 0x42,
	0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x60, 0x29, 0xde, 0x20, 0x30, 0x5b, 0x48, 0x84, 0x8b, 0x35,
	0x25, 0xb1, 0x24, 0xd1, 0x50, 0x82, 0x09, 0x2c, 0x08, 0xe1, 0xc0, 0x44, 0x8d, 0x24, 0x98, 0x11,
	0xa2, 0x46, 0x30, 0x51, 0x63, 0x09, 0x16, 0x84, 0xa8, 0x71, 0x12, 0x1b, 0xd8, 0x09, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x98, 0xff, 0x2f, 0xbb, 0x00, 0x00, 0x00,
}
