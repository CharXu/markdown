
##########################################################################
#protobuf的编码实现
##########################################################################


protobuf3.0将各种数据类型转变成二进制格式，具体是怎么实现的呢？可以通过源码分析

string类型的处理

定义一个message

message man{
	string Name = 1;
	int32 Sex = 2;
}

protoc --gogoslick_out=""得到go文件
	proto文件中的消息对应go文件中的一个结构体
		结构体中包含Getter，Setter，Equal，GoString,Marshal,Unmashal,MarshalTo等方法

为了测试，新建go文件中定义一个man结构体
man := &proto.Man{Name: "1"， Sex: "1"}




二进制数据的实现

	二进制数组的大小：
		通过size预分配一个大概2倍于结构体中字符串字节数的容量，比如Man中的Name字段只有一个字节，那么分配的存储二进制数组的len为3个字节
		Size() (n int) {
			var l int
			_ = l
			l = len(m.Name)
			if l > 0 {
				n += 1 + l + sovMan(uint64(l))#每一个字段都会分配2倍于值或者长度大小的空间，然后加上一个额外的空间
			}
			if m.Sex != 0 {
				n += 1 + sovMan(uint64(m.Sex))
			}
			if len(m.Prize) > 0 {
				for _, s := range m.Prize {
					l = len(s)
					n += 1 + l + sovMan(uint64(l))
				}
			}
			return n
		}
		
	二进制流的元素组成(string)
		二进制流是根据消息的编号分段的，每一段由三个部分构成：
		
		1.每一段的第一个元素由字段的编号和类型生成，只有一个字节，算法如下：
		
			flag = flag << 3；#字段的标识号左移三位
			key = flag | type#和类型进行位或运算
			
			结果就是第一个元素的最低三位表示字段的类型，剩下的位向右移三位得到字段的标识号
			上面的粒子编码后打印出的结果：
			编码：byte, err := man.Marshal()

			以二进制格式打印出byte的内容：
				fmt.Printf("%b", byte)
				[1010 1 110001 10000 1]
					Name字段的数据为：1010 1 110001
					1010表示Name的标识号和类型：
						标识号：1
						类型：string，protobuf里面共有6种基本的字段类型，分别用0，1，2，3，4，5表示，string对应的就是2
				因此，编译器内部对Name字段的处理为：
					flag = 1 << 3 -> 1000
					key = flag | type -> 1000 | 10 -> 1010
							
		2.每一段的第二个元素根据字段的类型不同有不同的处理方式：
			int，uint这类存储着值的类型，第二个字段就是值本身的二进制表示
			string，slice这类存储这元素个数的类型，第二个字段就是存储的字节的总数
			值和长度都会是以varint编码的形式保存的
			if len(m.Name) > 0 {#判断字符串的长度是否为0
				dAtA[i] = 0xa
				i++
				i = encodeVarintMan(dAtA, i, uint64(len(m.Name)))
				i += copy(dAtA[i:], m.Name)
			}
			if m.Sex != 0 {#判断值是否为0
				dAtA[i] = 0x10
				i++
				i = encodeVarintMan(dAtA, i, uint64(m.Sex))
			}
			存储的字节总数或者值通过encodeVarint得到：
			encodeVarint函数应该是吧字段的值或者长度编码成Varint的格式，可变字节的整形编码。
			简单来说就是较小的数用一个字节表示，较大的数才用更多的字节，而且能够根据字节最高位的状态判断这个数用了多少字节表示
			func encodeVarintMan(dAtA []byte, offset int, v uint64)
				offset表示字节数组的元素位置
				v表示结构体成员的字节长度
			func encodeVarintMan(dAtA []byte, offset int, v uint64) int {
				for v >= 1<<7 {#如果字节数或者值大于127则用多个字节表示
					dAtA[offset] = uint8(v&0x7f | 0x80)#这个算法应该是将较大的数的一部分表示为多个字节，具体逻辑需要进一步思考
					v >>= 7
					offset++
				}
				dAtA[offset] = uint8(v)#如果字节数或者值小于128，则只用一个字节表示
				return offset + 1
			}
			因此，第二个元素根据字段类型和值的大小会有不同的字节数
		
		3.第三个元素通过copy方法得到
			func copy(dst, src []Type) int
			copy是一个内置函数，官方的描述如下：
				The copy built-in function copies elements from a source slice into a
				destination slice. (As a special case, it also will copy bytes from a
				string to a slice of bytes.) The source and destination may overlap. Copy
				returns the number of elements copied, which will be the minimum of
				len(src) and len(dst).
				大致意思就是如果复制源是字符串，那么就会将字符串的二进制表示复制到目的二进制数组当中,返回复制的字符的数量，也就是字节的长度
			因此，第三个元素开始，字节数组里面存储的是结构体第一个成员(string类型)的UTF-8编码
			
		所有字段的字节都分配好了之后，在根据实际分配的字节数截取之前预定义的切片：
			return dAtA[:n]
			
	类型标号对照：
		Type	Meaning				Used For
		0		Varint				int32, int64, uint32, uint64, sint32, sint64, bool, enum
		1		64-bit				fixed64, sfixed64, double
		2		Length-delimited	string, bytes, embedded messages, packed repeated fields
		3		Start group			groups (deprecated)
		4		End group			groups (deprecated)
		5		32-bit				fixed32, sfixed32, float
		
	嵌套message的处理：
		嵌套message的处理和字符串类似，嵌套的message前面多有类型和标识号、长度信息，而message中的内容则保持不变
		
	repeated类型的处理：
		repeated在go中实现为一个切片，在上面的例子中加入一个repeated string prize = 3；字段，对于切片的MarshalTo()的处理如下：
			if len(m.Prize) > 0 {
				for _, s := range m.Prize {#遍历每一个元素，转化成varint
					dAtA[i] = 0x1a
					i++
					l = len(s)
					for l >= 1<<7 {
						dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
						l >>= 7
						i++
					}
					dAtA[i] = uint8(l)
					i++
					i += copy(dAtA[i:], s)
				}
			}
		可以发现，由于切片内部元素的类型都是一样的，因此切片字段的长度为所有元素的字节数，然后对每一个元素进行varint编码操作
		
#####################################################################################################################3333
#varints解码
##########################################################################################################################

从二进制流中解码获得原始数据，解码逻辑如下：
	1.解码第一个字节
	2.根据第一个字节描述的字段类型和编号，解码后面的字节，后面的字节根据varint的规则可以得到哪些字节是描述同一个值的
	
看看gogoslick的解码函数，使用的例子是上述的man：
	func (m *Man) Unmarshal(dAtA []byte) error {
		l := len(dAtA)#首先肯定要获得二进制流的字节数,然后对每个字节进行解码
		
		iNdEx := 0
		
		...
		
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]#b中保存的是二进制流的第一个字节
				iNdEx++
				wire |= (uint64(b) & 0x7F) << shift#protobuf中的字节都会转变成varint编码的方式，因此对于较大的标识号会用多个字节来表示
				if b < 0x80 {#这个算法就是按照varint编码的逻辑，还原实际的二进制数据
					break
				}
			}
			
		#得到标识字段类型和标识号的字节后,还需要分别解析出类型和标识号，编码的时候最低位的三个字节存储类型
		fieldNum := int32(wire >> 3)#字节向右移三位得到字段标识号
		wireType := int(wire & 0x7)#字节最低三位表示类型
		
		然后函数进行了一个switch选择语句，根据定义字段的标识号，对不同的类型进行处理，比如上述例子的Name字段，标识号为1，类型号为2：
			case 1:
				if wireType != 2 {
					return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {#这个for循环依然是对varint编码的还原过程，结果是得到字符串的长度
					if shift >= 64 {
						return ErrIntOverflowMan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= (uint64(b) & 0x7F) << shift#解码varint
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return ErrInvalidLengthMan
				}
				postIndex := iNdEx + intStringLen#字符串的长度+当前字节的位置就得到字符串内容的偏移量
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Name = string(dAtA[iNdEx:postIndex])#取字符串的内容
				iNdEx = postIndex#移动索引到下一个字节
		
		对其他类型的处理也大致相同
		
######################################################################################################################
#总结
#################################################################################################################3

protobuf编码的逻辑很简单，最关键的我觉得就是使用了varint字节压缩算法，编码和解码的实际工作就是varint的算法和逆向算法

对于varint进行一个简单的总结：
	每个字节用最高位标识下一个字节是否存储的是同一个值
	低7位存储元素的值，单个字节最大可存储十进制的127
	用多个字节存储时的编码方向会做一个倒置
	
	例如：
		1的varint表示：
			00000001：最高字节为0，1的表示只需一个字节
		300的varint表示：
			300 > 127，因此会需要2个字节
			具体算法就是上面的：
				for v >= 1<<7 {
					dAtA[offset] = uint8(v&0x7f | 0x80)
					v >>= 7
					offset++
				}
			300的二进制表示为：100101100
			先和001111111做 位与运算：101100 | 10000000 -> 10101100
			和0x80的位或运算保证第一个字节的最高位为1，说明第二个字节表示的是同一个数
			uint8截断最高的8位组成第一个字节：10101100
			v右移7七位得到第二个字节:10
			因此300的varint表示为：10101100 00000010
	
	




			
	